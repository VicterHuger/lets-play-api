// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  password     String
  isBanned     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  profiles     Profile[]
  lobbies      Lobby[]
  lobbiesUsers LobbyUser[]

  @@map("users")
}

model Profile {
  id              Int      @id @default(autoincrement())
  userName        String   @unique
  name            String
  lastName        String
  sex             Sex
  birthday        DateTime
  isPhoneVerified Boolean  @default(false)
  isEmailVerified Boolean  @default(false)
  score           Int?     @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  phone           Phone    @relation(fields: [phoneId], references: [id])
  phoneId         Int
  photo           Photo    @relation(fields: [photoId], references: [id])
  photoId         Int
  address         Address  @relation(fields: [addressId], references: [id])
  addressId       Int

  @@unique([userId])
  @@map("profiles")
}

model Address {
  id           Int          @id @default(autoincrement())
  street       String
  number       String?      @default("no number")
  complement   String?      @default("no complement")
  zipCode      String
  neighborhood String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  city         City         @relation(fields: [cityId], references: [id])
  cityId       Int
  profiles     Profile[]
  EventLocals  EventLocal[]

  @@unique([number, complement, zipCode])
  @@map("addresses")
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     State     @relation(fields: [stateId], references: [id])
  stateId   Int
  addresses Address[]

  @@unique([name, stateId])
  @@map("cities")
}

model State {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  uf        String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]

  @@map("states")
}

model Lobby {
  id                  Int         @id @default(autoincrement())
  title               String
  status              Status
  description         String?     @default("No description")
  eventDate           DateTime
  eventTimeStart      String
  eventTimeEnd        String
  minParticipants     Int
  maxParticipants     Int
  allowedParticipants Allowed
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  userHost            User        @relation(fields: [userHostId], references: [id])
  userHostId          Int
  sport               Sport       @relation(fields: [sportId], references: [id])
  sportId             Int
  eventLocal          EventLocal  @relation(fields: [eventLocalId], references: [id])
  eventLocalId        Int
  lobbiesUsers        LobbyUser[]

  @@unique([userHostId, eventDate, eventTimeStart, eventLocalId, minParticipants])
  @@map("lobbies")
}

model LobbyUser {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  lobby     Lobby    @relation(fields: [lobbyId], references: [id])
  lobbyId   Int

  @@unique([userId, lobbyId])
  @@map("lobbiesUsers")
}

model EventLocal {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isPublic  Boolean  @default(false)
  isOutdoor Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   Address  @relation(fields: [addressId], references: [id])
  addressId Int
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   Int
  lobbies   Lobby[]

  @@map("eventLocals")
}

model Sport {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lobbies   Lobby[]

  @@map("sports")
}

model Phone {
  id        Int       @id @default(autoincrement())
  number    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profiles  Profile[]

  @@map("phones")
}

model Photo {
  id          Int          @id @default(autoincrement())
  description String?      @default("no description")
  link        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  profiles    Profile[]
  eventLocals EventLocal[]

  @@map("photos")
}

enum Sex {
  FEMALECISGENDER
  FEMALETRANSGENDER
  MALECISGENDER
  MALETRANSGENDER
}

enum Status {
  OPEN
  ONGOING
  CLOSED
  FULL
}

enum Allowed {
  MEN
  WOMEN
  MIXED
}
